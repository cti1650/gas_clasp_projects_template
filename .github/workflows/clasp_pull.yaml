# GASの既存のコードをclaspでプルしてPRするAction
---
name: Clasp Pull Code

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment to pull code from'
        required: true
        type: choice
        options:
          - deployment
          - staging
          - production

permissions:
  contents: write
  pull-requests: write

jobs:
  pull-clasp-code:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Determine Secret Environment Prefix
        id: secret-env
        env:
          ENVIRONMENT: ${{ inputs.environment }}
        run: |
          case $ENVIRONMENT in
            deployment)
              PREFIX="DEV_"
              ;;
            staging)
              PREFIX="STAGING_"
              ;;
            production)
              PREFIX="PROD_"
              ;;
            *)
              PREFIX=""
              ;;
          esac
          echo "prefix=$PREFIX" >> $GITHUB_OUTPUT

      - name: Setup repository
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: '**/yarn.lock'

      - name: Cache Global Packages
        uses: actions/cache@v4
        id: cache_global_clasp
        with:
          path: |
            ~/.npm-global
            ~/.config/clasp
          key: ${{ runner.os }}-global-clasp-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-global-clasp-

      - name: Setup Global NPM Path
        run: |
          mkdir -p ~/.npm-global
          npm config set prefix '~/.npm-global'
          echo "PATH=~/.npm-global/bin:$PATH" >> $GITHUB_ENV

      - name: Install Clasp
        if: steps.cache_global_clasp.outputs.cache-hit != 'true'
        run: |
          npm install -g @google/clasp
          which clasp || echo "clasp not found in PATH"
          echo "Installed clasp version:"
          clasp --version || echo "Failed to run clasp --version"

      - name: Save yarn Cache
        uses: actions/cache@v4
        id: cache_yarn_post
        with:
          path: ~/.yarn
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Cache Dependency
        uses: actions/cache@v4
        id: cache_dependency
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-build-${{ hashFiles('yarn.lock') }}

      - name: Install Dependency
        if: steps.cache_dependency.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile --silent

      - name: Check Push Secrets
        id: check-push-secret
        env:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          SCRIPT_ID: ${{ secrets.SCRIPT_ID }}
        run: |
          interrupt=false

          if [ -z "$ACCESS_TOKEN" ] || [ -z "$CLIENT_ID" ] || [ -z "$SCRIPT_ID" ]; then
            interrupt=true
          fi

          echo "interrupt=$interrupt" >> $GITHUB_OUTPUT

      - name: Generate ~/.clasprc.json
        if: steps.check-push-secret.outputs.interrupt != 'true'
        env:
          PREFIX: ${{ steps.secret-env.outputs.prefix }}
          ACCESS_TOKEN: ${{ secrets[format('{0}ACCESS_TOKEN', steps.secret-env.outputs.prefix)] || secrets.ACCESS_TOKEN }}
          ID_TOKEN: ${{ secrets[format('{0}ID_TOKEN', steps.secret-env.outputs.prefix)] || secrets.ID_TOKEN }}
          REFRESH_TOKEN: ${{ secrets[format('{0}REFRESH_TOKEN', steps.secret-env.outputs.prefix)] || secrets.REFRESH_TOKEN }}
          CLIENT_ID: ${{ secrets[format('{0}CLIENT_ID', steps.secret-env.outputs.prefix)] || secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets[format('{0}CLIENT_SECRET', steps.secret-env.outputs.prefix)] || secrets.CLIENT_SECRET }}
        run: |
          echo '{
            "token": {
              "access_token": "'$ACCESS_TOKEN'",
              "refresh_token": "'$REFRESH_TOKEN'",
              "scope": "https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/service.management https://www.googleapis.com/auth/script.deployments https://www.googleapis.com/auth/logging.read https://www.googleapis.com/auth/script.webapp.deploy https://www.googleapis.com/auth/userinfo.profile openid https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/script.projects https://www.googleapis.com/auth/drive.metadata.readonly",
              "token_type": "Bearer",
              "id_token": "'$ID_TOKEN'",
              "expiry_date": 1728331650371
            },
            "oauth2ClientSettings": {
              "clientId": "'$CLIENT_ID'",
              "clientSecret": "'$CLIENT_SECRET'",
              "redirectUri": "http://localhost"
            },
            "isLocalCreds": false
          }' | if command -v jq > /dev/null; then
            jq '.' > ~/.clasprc.json
          else
            echo "::error::jq is not installed"
            exit 1
          fi

      - name: Generate ~/.clasp.json
        if: steps.check-push-secret.outputs.interrupt != 'true'
        env:
          PREFIX: ${{ steps.secret-env.outputs.prefix }}
          SCRIPT_ID: ${{ secrets[format('{0}SCRIPT_ID', steps.secret-env.outputs.prefix)] || secrets.SCRIPT_ID }}
        run: |
          echo '{
            "scriptId": "'$SCRIPT_ID'",
            "rootDir": "./src"
          }' | if command -v jq > /dev/null; then
            jq '.' > ~/.clasp.json
          else
            echo "::error::jq is not installed"
            exit 1
          fi

      - name: Clasp Pull
        run: |
          mkdir -p ./src
          
          clasp pull
          echo "Pulled files:"
          ls -la ./src
          
          git status

      - name: Get Default Branch
        id: default-branch
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          DEFAULT_BRANCH=$(gh repo view --json defaultBranchRef --jq .defaultBranchRef.name)
          echo "name=$DEFAULT_BRANCH" >> $GITHUB_OUTPUT

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create Branch and Commit
        env:
          ENVIRONMENT: ${{ inputs.environment }}
          DEFAULT_BRANCH: ${{ steps.default-branch.outputs.name }}
        run: |
          TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
          BRANCH_NAME="clasp-pull-$ENVIRONMENT-$TIMESTAMP"
          
          git fetch origin $DEFAULT_BRANCH
          
          git checkout -b $BRANCH_NAME origin/$DEFAULT_BRANCH
          
          if git status --porcelain | grep .; then
            git add ./src
            git commit -m "Pull latest code from Google Apps Script ($ENVIRONMENT)"
            
            echo "Pushing changes to $BRANCH_NAME..."
            git push -u origin $BRANCH_NAME || {
              echo "Push failed. Debug info:"
              git status
              git branch -vv
              exit 1
            }
            
            echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
            echo "HAS_CHANGES=true" >> $GITHUB_ENV
          else
            echo "No changes detected"
            echo "HAS_CHANGES=false" >> $GITHUB_ENV
          fi

      - name: Create Pull Request
        if: env.HAS_CHANGES == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ENVIRONMENT: ${{ inputs.environment }}
          DEFAULT_BRANCH: ${{ steps.default-branch.outputs.name }}
        run: |
          sleep 5
          
          gh pr create \
            --base $DEFAULT_BRANCH \
            --head "${{ env.BRANCH_NAME }}" \
            --title "Pull latest code from Google Apps Script ($ENVIRONMENT)" \
            --body "Automatically pulled latest code from Google Apps Script for $ENVIRONMENT environment.

            Changes include:
            - Latest code from Google Apps Script
            - Pulled using clasp
            - Automated by GitHub Actions"

      - name: Summary
        run: |
          echo "## Clasp Pull Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- Pull Timestamp: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- Branch Created: ${{ env.BRANCH_NAME }}" >> $GITHUB_STEP_SUMMARY
