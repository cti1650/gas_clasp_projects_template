# GASのテスト、自動プッシュ、自動デプロイを取りまとめて処理するAction
---
name: Deploy Jobs

on:
  workflow_call:
    secrets:
      ACCESS_TOKEN:
      ID_TOKEN:
      REFRESH_TOKEN:
      CLIENT_ID:
      CLIENT_SECRET:
      SCRIPT_ID:
      DEPLOYMENT_ID:

permissions: {}

defaults:
  run:
    shell: bash

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read

    steps:
      - name: Setup repository
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: '**/yarn.lock'

      - name: Cache Global Packages
        uses: actions/cache@v4
        id: cache_global_clasp
        with:
          path: |
            ~/.npm-global
            ~/.config/clasp
          key: ${{ runner.os }}-global-clasp-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-global-clasp-

      - name: Setup Global NPM Path
        run: |
          mkdir -p ~/.npm-global
          npm config set prefix '~/.npm-global'
          echo "PATH=~/.npm-global/bin:$PATH" >> $GITHUB_ENV

      - name: Install Clasp
        if: steps.cache_global_clasp.outputs.cache-hit != 'true'
        run: |
          npm install -g @google/clasp
          which clasp || echo "clasp not found in PATH"
          echo "Installed clasp version:"
          clasp --version || echo "Failed to run clasp --version"

      - name: Save yarn Cache
        uses: actions/cache@v4
        id: cache_yarn_post
        with:
          path: ~/.yarn
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Cache Dependency
        uses: actions/cache@v4
        id: cache_dependency
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-build-${{ hashFiles('yarn.lock') }}

      - name: Install Dependency
        if: steps.cache_dependency.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile --silent

      - name: Audit
        if: steps.cache_dependency.outputs.cache-hit != 'true'
        run: |
          yarn audit --level high
          if [ $? -ne 0 ]; then
            echo "::warning::高リスクの脆弱性が検出されました"
          fi

      - name: Check Lint
        run: |
          yarn lint

      - name: Check Push Secrets
        id: check-push-secret
        env:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          SCRIPT_ID: ${{ secrets.SCRIPT_ID }}
        run: |
          interrupt=false

          if [ -z "$ACCESS_TOKEN" ] || [ -z "$CLIENT_ID" ] || [ -z "$SCRIPT_ID" ]; then
            interrupt=true
          fi

          echo "interrupt=$interrupt" >> $GITHUB_OUTPUT

      - name: Generate ~/.clasprc.json
        if: steps.check-push-secret.outputs.interrupt != 'true'
        env:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          ID_TOKEN: ${{ secrets.ID_TOKEN }}
          REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
        run: |
          echo '{
            "token": {
              "access_token": "'$ACCESS_TOKEN'",
              "refresh_token": "'$REFRESH_TOKEN'",
              "scope": "https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/service.management https://www.googleapis.com/auth/script.deployments https://www.googleapis.com/auth/logging.read https://www.googleapis.com/auth/script.webapp.deploy https://www.googleapis.com/auth/userinfo.profile openid https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/script.projects https://www.googleapis.com/auth/drive.metadata.readonly",
              "token_type": "Bearer",
              "id_token": "'$ID_TOKEN'",
              "expiry_date": 1728331650371
            },
            "oauth2ClientSettings": {
              "clientId": "'$CLIENT_ID'",
              "clientSecret": "'$CLIENT_SECRET'",
              "redirectUri": "http://localhost"
            },
            "isLocalCreds": false
          }' | if command -v jq > /dev/null; then
            jq '.' > ~/.clasprc.json
          else
            echo "::error::jq is not installed"
            exit 1
          fi

      - name: Generate ~/.clasp.json
        if: steps.check-push-secret.outputs.interrupt != 'true'
        env:
          SCRIPT_ID: ${{ secrets.SCRIPT_ID }}
        run: |
          echo '{
            "scriptId": "'$SCRIPT_ID'",
            "rootDir": "./src"
          }' | if command -v jq > /dev/null; then
            jq '.' > ~/.clasp.json
          else
            echo "::error::jq is not installed"
            exit 1
          fi

      - name: Push
        if: steps.check-push-secret.outputs.interrupt != 'true'
        run: |
          clasp push -f

      - name: Check Deploy Secrets
        id: check-deploy-secret
        env:
          DEPLOYMENT_ID: ${{ secrets.DEPLOYMENT_ID }}
        run: |
          if [ -z "$DEPLOYMENT_ID" ]; then
            echo "interrupt=true" >> $GITHUB_OUTPUT
          else
            echo "interrupt=false" >> $GITHUB_OUTPUT
          fi

      - name: Deploy
        if: steps.check-push-secret.outputs.interrupt != 'true' && steps.check-deploy-secret.outputs.interrupt != 'true'
        env:
          DEPLOYMENT_ID: ${{ secrets.DEPLOYMENT_ID }}
        run: |
          clasp deploy --deploymentId $DEPLOYMENT_ID